{"version":3,"sources":["api/todolist-api.ts","app/hooks.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolists/todolists-reducer.ts","features/todolists/tasks-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolists/todolist/task/TaskComponent.tsx","features/todolists/todolist/Todolist.tsx","features/todolists/TodolistsLists.tsx","components/errorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResultCode","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","todolistId","title","put","get","post","delete","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetWorkError","message","login","createAsyncThunk","thunkAPI","res","resultCode","OK","rejectWithValue","errors","fieldsErrors","err","isAxiosError","undefined","logout","param","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeApp","isInitialized","appReducer","fetchTodolists","todos","removeTodolist","changeTodolistEntityStatusAC","id","createTodolist","todolist","item","changeTodolistTitle","changeTodolistFilterAC","index","findIndex","todo","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasks","tasks","items","deleteTask","changeTaskEntityStatusAC","createTask","updateTask","getState","task","find","t","forEach","el","todoListId","tasksReducer","AddItemForm","memo","props","addItem","useState","newTitle","setNewTitle","setError","addNewItem","trim","TextField","onChange","e","currentTarget","onKeyDown","key","label","helperText","variant","disabled","size","IconButton","color","onClick","AddBox","EditableSpan","React","callBack","editMode","setEditMode","setTitle","ActivateEditMode","onBlur","autoFocus","onDoubleClick","TaskComponent","RemoveTaskHandler","useCallback","taskID","removeTask","onChangeHandler","checked","Completed","New","changeTaskStatus","ChangeTask","changeTaskTitle","className","Checkbox","aria-label","Delete","Todolist","changeFilter","addTask","onAllClickHandler","onActiveClickHandler","onCompleteClickHandler","addNewTask","ChangeTodolist","allClassName","activeClassName","completedClassName","tasksForTodolist","useEffect","Button","TodolistsLists","todolists","auth","removeTodolistCallback","addTodolist","todolistTitle","changeTodolistTitleCallback","Grid","container","style","padding","spacing","Paper","to","ROUTS","LOGIN","Alert","ref","elevation","CustomizedSnackbars","app","handleClose","event","reason","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","Typography","component","LinearProgress","Container","fixed","path","element","NOT_FOUND","textAlign","top","CircularProgress","Boolean","window","location","hostname","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6310effa.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {LoginPayloadType} from \"../features/login/Login\";\r\nimport {UpdateTaskType} from \"../features/todolists/tasks-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41',\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>(`todo-lists/`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseGetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: ModelType) {\r\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginPayloadType) {\r\n        return instance.post<LoginPayloadType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type AuthMeResponseType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type ResponseGetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type FieldsError = { field: string, error: string }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors?: FieldsError[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\r\nimport {AppDispatch, AppRootState} from \"./store\"\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootState> = useSelector","import {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\nexport const handleServerAppError = <D>(dispatch: Dispatch, data: ResponseType<D>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'some error'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetWorkError = (dispatch: Dispatch, error: { message: string }) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n\r\n\r\n","import {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {LoginPayloadType} from \"./Login\";\r\nimport {authAPI, FieldsError, ResultCode} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n// thunks\r\n\r\nexport const login = createAsyncThunk<undefined, LoginPayloadType, {\r\n    rejectValue: { errors: string[], fieldsErrors?: FieldsError[] }\r\n}>('auth/login', async (data: LoginPayloadType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(thunkAPI.dispatch, res.data)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(thunkAPI.dispatch, err)\r\n            return thunkAPI.rejectWithValue({errors: [err.message], fieldsErrors: undefined})\r\n        }\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(thunkAPI.dispatch, res.data)\r\n            thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(thunkAPI.dispatch, err)\r\n            thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n})\r\n\r\n// slice\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false as boolean\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n","import {setIsLoggedIn} from \"../features/login/auth-reducer\";\r\nimport {authAPI, ResultCode} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../utils/error-utils\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// thunks\r\n\r\nexport const initializeApp = createAsyncThunk('app/initialize', async (param, {dispatch, rejectWithValue}) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedIn({value: true}))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            rejectWithValue({})\r\n        }\r\n    }\r\n    return\r\n})\r\n\r\n// slice\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as null | string,\r\n        isInitialized: false as boolean\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n// types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n","import {ResultCode, todolistAPI, TodolistType} from \"../../api/todolist-api\"\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// thunks\r\n\r\nexport const fetchTodolists = createAsyncThunk('todolists/fetchTodolists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todos: res.data}\r\n    } catch (e) {\r\n\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n            return rejectWithValue(null)\r\n        }\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        await todolistAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (e) {\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'idle'}))\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            return rejectWithValue(null)\r\n        }\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const createTodolist = createAsyncThunk('todolists/createTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            return rejectWithValue(null)\r\n        }\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { todolistId: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.updateTodolist(param.todolistId, param.title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.todolistId, title: param.title}\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            return rejectWithValue(null)\r\n        }\r\n        return rejectWithValue(null)\r\n    } finally {\r\n        dispatch(changeTodolistEntityStatusAC({id: param.todolistId, status: 'idle'}))\r\n    }\r\n})\r\n\r\n\r\n// slice\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as TodoListDomainType[],\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            if (index !== -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            if (index !== -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todos.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todo => todo.id === action.payload.id)\r\n                if (index !== -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(createTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todo => todo.id === action.payload.id)\r\n                if (index !== -1) {\r\n                    state[index].title = action.payload.title\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\n//types\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {createTodolist, fetchTodolists, removeTodolist} from \"./todolists-reducer\"\r\nimport {ModelType, ResultCode, TaskType, todolistAPI} from \"../../api/todolist-api\"\r\nimport {AppRootState} from \"../../app/store\"\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\n// thunks\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(thunkAPI.dispatch, err)\r\n        }\r\n    }\r\n})\r\n\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({todolistId: param.todolistId, taskId: param.taskId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(thunkAPI.dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(thunkAPI.dispatch, err)\r\n        }\r\n    }\r\n})\r\n\r\nexport const createTask = createAsyncThunk('tasks/addTask', async (param: { todolistId: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            return rejectWithValue(null)\r\n        }\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { todolistId: string, taskId: string, value: UpdateTaskType }, {\r\n    dispatch,\r\n    rejectWithValue,\r\n    getState\r\n}) => {\r\n\r\n    const state = getState() as AppRootState\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (task) {\r\n        const model: ModelType = {\r\n            ...task,\r\n            ...param.value\r\n        }\r\n        try {\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            dispatch(changeTaskEntityStatusAC({todolistId: param.todolistId, taskId: param.taskId, status: 'loading'}))\r\n            const res = await todolistAPI.updateTask(param.todolistId, param.taskId, model)\r\n            if (res.data.resultCode === ResultCode.OK) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (e) {\r\n            const err = e as Error | AxiosError\r\n            if (axios.isAxiosError(err)) {\r\n                handleServerNetWorkError(dispatch, err)\r\n                return rejectWithValue(null)\r\n            }\r\n            return rejectWithValue(null)\r\n        } finally {\r\n            dispatch(changeTaskEntityStatusAC({todolistId: param.todolistId, taskId: param.taskId, status: 'idle'}))\r\n\r\n        }\r\n    } else {\r\n        return rejectWithValue('task not found in state')\r\n    }\r\n})\r\n\r\n// slice\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, status: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index !== -1) {\r\n                tasks[index] = {...tasks[index], entityStatus: action.payload.status}\r\n            }\r\n        },\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todos.forEach(el => state[el.id] = [])\r\n            })\r\n            .addCase(createTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    state[action.payload.todolistId] = action.payload.tasks.map(task => ({\r\n                        ...task,\r\n                        entityStatus: 'idle'\r\n                    }))\r\n                }\r\n            })\r\n            .addCase(deleteTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload!.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload!.taskId)\r\n                if (index !== -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(createTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                tasks.unshift({...action.payload, entityStatus: 'idle'})\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.value}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\n//types\r\n\r\nexport type UpdateTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [id: string]: TaskDomainType[]\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\r\n    const {addItem} = props\r\n\r\n    const [newTitle, setNewTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addNewItem()\r\n        }\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n    }\r\n\r\n\r\n    const addItemHandler = () => {\r\n        addNewItem()\r\n    }\r\n\r\n    const addNewItem = () => {\r\n        const trimmedTitle = newTitle.trim()\r\n\r\n        if (trimmedTitle) {\r\n            addItem(newTitle)\r\n            setNewTitle('')\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                onChange={onChangeHandler}\r\n                value={newTitle}\r\n                onKeyDown={onKeyDownHandler}\r\n                error={!!error}\r\n                label='Title'\r\n                helperText={error && 'Title is required'}\r\n                variant=\"outlined\"\r\n                disabled={props.disabled}\r\n                size=\"small\"/>\r\n            <IconButton color=\"primary\" onClick={addItemHandler} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    callBack: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const {value, callBack, disabled} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(value)\r\n\r\n    const ActivateEditMode = () => {\r\n        setEditMode(!editMode)\r\n        callBack(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                onChange={onChangeHandler}\r\n                value={title}\r\n                onBlur={ActivateEditMode}\r\n                autoFocus\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n            />\r\n            :\r\n            disabled ? <span>{value}</span> : <span onDoubleClick={ActivateEditMode}>{value}</span>\r\n    );\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@mui/material\"\r\nimport EditableSpan from \"../../../../components/editableSpan/EditableSpan\"\r\nimport {Delete} from \"@mui/icons-material\"\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\"\r\n\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (todolistID: string, taskId: string, status: TaskStatuses) => void\r\n    removeTask: (todolistId: string, taskID: string) => void\r\n    changeTaskTitle: (TodolistId: string, taskId: string, newTitle: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n    disabled: boolean\r\n\r\n}\r\nconst TaskComponent = React.memo((props: TaskPropsType) => {\r\n    const RemoveTaskHandler = useCallback((taskID: string) => {\r\n        props.removeTask(props.todolistId, taskID)\r\n    }, [props.removeTask, props.task.id])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        props.changeTaskStatus(props.todolistId, props.task.id, status)\r\n    }, [props.todolistId, props.task.id])\r\n    const ChangeTask = useCallback((taskId: string, newTitle: string) => {\r\n        props.changeTaskTitle(props.todolistId, taskId, newTitle)\r\n    }, [props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed} color='primary'\r\n                  disabled={props.disabled}/>\r\n        <EditableSpan value={props.task.title} callBack={(newTitle) => ChangeTask(props.task.id, newTitle)}\r\n                      disabled={props.disabled}/>\r\n        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => RemoveTaskHandler(props.task.id)}\r\n                    disabled={props.disabled}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\nexport default TaskComponent;","import React, {useCallback, useEffect} from \"react\"\r\nimport AddItemForm from \"../../../components/addItemForm/AddItemForm\"\r\nimport EditableSpan from \"../../../components/editableSpan/EditableSpan\"\r\nimport {Button, IconButton} from \"@mui/material\"\r\nimport {Delete} from \"@mui/icons-material\"\r\nimport TaskComponent from \"./task/TaskComponent\"\r\nimport {TaskStatuses} from \"../../../api/todolist-api\"\r\nimport {FilterType} from \"../todolists-reducer\";\r\nimport {fetchTasks, TaskDomainType} from \"../tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../app/hooks\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskDomainType[]\r\n    removeTask: (todolistId: string, taskID: string) => void\r\n    changeFilter: (todolistID: string, filter: FilterType) => void\r\n    addTask: (todolistID: string, newTitle: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, status: TaskStatuses) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (TodolistId: string, taskId: string, newTitle: string) => void\r\n    changeTodolistTitle: (TodolistId: string, newTitle: string) => void\r\n    filter: FilterType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((\r\n    {\r\n        id,\r\n        title,\r\n        tasks,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        removeTodolist,\r\n        changeTaskTitle,\r\n        changeTodolistTitle,\r\n        filter,\r\n        entityStatus\r\n    }\r\n) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(id, 'all')\r\n    }, [changeFilter, id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(id, 'active')\r\n    }, [changeFilter, id])\r\n\r\n    const onCompleteClickHandler = useCallback(() => {\r\n        changeFilter(id, 'completed')\r\n    }, [changeFilter, id])\r\n\r\n\r\n    const addNewTask = useCallback((title: string) => {\r\n        addTask(id, title)\r\n    }, [addTask, id])\r\n\r\n\r\n    const onClickTitleHandler = () => {\r\n        removeTodolist(id)\r\n    }\r\n\r\n    const ChangeTodolist = useCallback((newTitle: string) => {\r\n        changeTodolistTitle(id, newTitle)\r\n    }, [changeTodolistTitle, id])\r\n\r\n    const allClassName = filter === 'all' ? \"outlined\" : \"text\"\r\n    const activeClassName = filter === 'active' ? \"outlined\" : \"text\"\r\n    const completedClassName = filter === 'completed' ? \"outlined\" : \"text\"\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(id))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan value={title} callBack={ChangeTodolist} disabled={entityStatus === 'loading'}/>\r\n                    <IconButton aria-label=\"delete\" size=\"small\" onClick={onClickTitleHandler}\r\n                                disabled={entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addNewTask} disabled={entityStatus === 'loading'}/>\r\n\r\n                {!tasksForTodolist.length && <span>No tasks</span>}\r\n                {tasksForTodolist.map(t =>\r\n                    <TaskComponent\r\n                        key={t.id}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                        todolistId={id}\r\n                        disabled={t.entityStatus === 'loading' || entityStatus === 'loading'}\r\n                    />\r\n                )}\r\n                <div>\r\n                    <Button onClick={onAllClickHandler} variant={allClassName} color='warning'>All</Button>\r\n                    <Button onClick={onActiveClickHandler} variant={activeClassName} color='error'>Active</Button>\r\n                    <Button onClick={onCompleteClickHandler} variant={completedClassName}\r\n                            color='secondary'>Completed</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\"\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\"\r\nimport {createTask, deleteTask, updateTask} from \"./tasks-reducer\"\r\nimport {\r\n    changeTodolistFilterAC, changeTodolistTitle,\r\n    createTodolist,\r\n\r\n    fetchTodolists,\r\n    FilterType, removeTodolist\r\n} from \"./todolists-reducer\"\r\nimport {TaskStatuses} from \"../../api/todolist-api\"\r\nimport {Grid, Paper} from \"@mui/material\"\r\nimport AddItemForm from \"../../components/addItemForm/AddItemForm\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../app/App\";\r\n\r\nexport const TodolistsLists: React.FC = () => {\r\n    let todolists = useAppSelector(state => state.todolists)\r\n    let tasks = useAppSelector(state => state.tasks)\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const removeTask = useCallback((todolistId: string, taskId: string) => {\r\n        dispatch(deleteTask({todolistId, taskId}))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((todolistId: string, filter: FilterType) => {\r\n        dispatch(changeTodolistFilterAC({id: todolistId, filter: filter}))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(createTask({todolistId, title}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTask({todolistId, taskId, value: {status}}))\r\n    }, [dispatch])\r\n\r\n    const removeTodolistCallback = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolist(todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const addTodolist = useCallback((todolistTitle: string) => {\r\n        dispatch(createTodolist(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, newTitle: string) => {\r\n        dispatch(updateTask({todolistId, taskId, value: {title: newTitle}}))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeTodolistTitleCallback = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitle({todolistId, title}))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolists())\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={ROUTS.LOGIN}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(t => {\r\n                return <Grid item key={t.id}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            key={t.id}\r\n                            id={t.id}\r\n                            entityStatus={t.entityStatus}\r\n                            title={t.title}\r\n                            tasks={tasks[t.id]}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            filter={t.filter}\r\n                            removeTodolist={removeTodolistCallback}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitleCallback}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const CustomizedSnackbars = () => {\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../app/App\";\r\nimport {login} from \"./auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport type LoginPayloadType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values: LoginPayloadType) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Too short password'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: async (values: LoginPayloadType, formikHelpers: FormikHelpers<LoginPayloadType>) => {\r\n            const action = await dispatch(login(values))\r\n\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n\r\n        },\r\n    });\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={ROUTS.DEFAULT}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'password'}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                                             checked={formik.values.rememberMe}\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, CircularProgress, Container, LinearProgress, Toolbar, Typography} from \"@mui/material\"\r\nimport {TodolistsLists} from \"../features/todolists/TodolistsLists\"\r\nimport {CustomizedSnackbars} from \"../components/errorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"./hooks\";\r\nimport {logout} from \"../features/login/auth-reducer\";\r\nimport {initializeApp} from \"./app-reducer\";\r\n\r\nexport enum ROUTS {\r\n    DEFAULT = '/',\r\n    LOGIN = '/login',\r\n    NOT_FOUND = '/404',\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useAppSelector(state => state.app.status)\r\n    const dispatch = useAppDispatch()\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const logOut = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\" className={'toolBar'}>\r\n                    <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                        Todolist\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color='inherit' onClick={logOut}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={ROUTS.DEFAULT} element={<TodolistsLists/>}></Route>\r\n                    <Route path={ROUTS.LOGIN} element={<Login/>}></Route>\r\n                    <Route path={ROUTS.NOT_FOUND}\r\n                           element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}></Route>\r\n                    <Route path='*' element={<Navigate to={ROUTS.NOT_FOUND}/>}></Route>\r\n                </Routes>\r\n            </Container>\r\n            <CustomizedSnackbars/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from '../features/todolists/tasks-reducer'\r\nimport {todolistsReducer} from '../features/todolists/todolists-reducer'\r\nimport {AnyAction, combineReducers} from 'redux'\r\nimport thunk, {ThunkDispatch} from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunk)\r\n\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport type AppRootState = ReturnType<RootReducerType>\r\nexport type AppDispatch = ThunkDispatch<AppRootState, unknown, AnyAction>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './app/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\r\n\r\nroot.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>\r\n   )\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}