{"version":3,"sources":["components/addItemForm/AddItemForm.tsx","api/types.ts","components/editableSpan/EditableSpan.tsx","utils/redux-utils.ts","api/todolist-api.ts","utils/error-utils.ts","app/app-reducer.ts","features/todolists/todolists-reducer.ts","features/todolists/selectors.ts","features/todolists/index.ts","features/todolists/todolist/tasks/tasks-reducer.ts","features/todolists/todolist/tasks/index.ts","features/todolists/todolist/tasks/TaskComponent.tsx","features/todolists/todolist/Todolist.tsx","features/auth/selectors.ts","features/auth/auth-reducer.ts","features/auth/Login.tsx","features/auth/index.ts","features/todolists/TodolistsList.tsx","app/App.tsx","components/errorSnackbar/ErrorSnackbar.tsx","app/selectors.ts","app/index.ts","app/AppBar.tsx","components/PageNotFound.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResultCode","AddItemForm","memo","props","addItem","useState","newTitle","setNewTitle","error","setError","addNewItem","trim","TextField","onChange","e","currentTarget","value","onKeyDown","key","label","helperText","variant","disabled","size","IconButton","color","onClick","sx","marginLeft","AddBox","EditableSpan","React","callBack","editMode","setEditMode","title","setTitle","ActivateEditMode","onBlur","autoFocus","onDoubleClick","useAppDispatch","useDispatch","useAppSelector","useSelector","useActions","actions","dispatch","useMemo","bindActionCreators","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","todolistId","put","get","post","delete","taskId","model","authAPI","data","handleAsyncServerAppError","thunkAPI","showError","setAppErrorAC","messages","length","setAppStatusAC","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","initializeApp","createAsyncThunk","param","res","resultCode","OK","asyncActions","slice","createSlice","name","initialState","isInitialized","reducers","state","action","payload","extraReducers","builder","addCase","fulfilled","appReducer","reducer","fetchTodolists","todos","removeTodolist","changeTodolistEntityStatusAC","id","createTodolist","todolist","item","changeTodolistTitle","changeTodolistFilterAC","index","findIndex","todo","filter","entityStatus","map","splice","unshift","todolistsReducer","todolists","todolistsActions","todolistsAsyncActions","todolistsSlice","fetchTasks","tasks","items","deleteTask","changeTaskEntityStatusAC","createTask","updateTask","getState","task","find","t","forEach","el","todoListId","tasksReducer","tasksActions","tasksAsyncActions","tasksSlice","TaskComponent","RemoveTaskHandler","useCallback","onChangeHandler","checked","Completed","New","ChangeTask","className","style","position","Checkbox","aria-label","top","right","Delete","fontSize","Todolist","addNewTask","helper","thunk","resultAction","rejected","match","errorMessage","ChangeTodolist","tasksForTodolist","onButtonFilterHandler","useEffect","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","selectIsLoggedIn","auth","isLoggedIn","login","logout","setIsLoggedIn","authReducer","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","test","onSubmit","formikHelpers","authActions","setFieldError","field","to","ROUTS","DEFAULT","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","TodolistsList","todolistsSelectors","authSelectors","addTodolist","todolistTitle","spacing","flexWrap","overflowX","width","overflow","LOGIN","Alert","ref","elevation","CustomizedSnackbars","app","handleClose","event","reason","Stack","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","appActions","Header","AppBar","Toolbar","Typography","component","LinearProgress","PageNotFound","textAlign","App","Container","fixed","path","element","NOT_FOUND","CircularProgress","Boolean","window","location","hostname","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.35ce8d63.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\nexport const AddItemForm = memo((props: AddItemFormPropsType) => {\r\n    const {addItem} = props\r\n\r\n    const [newTitle, setNewTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addNewItem()\r\n        }\r\n        if (error) {\r\n            setError(null)\r\n        }\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        addNewItem()\r\n    }\r\n\r\n    const addNewItem = async () => {\r\n        const trimmedTitle = newTitle.trim()\r\n\r\n        if (trimmedTitle) {\r\n            addItem(newTitle, {setError, setNewTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                onChange={onChangeHandler}\r\n                value={newTitle}\r\n                onKeyDown={onKeyDownHandler}\r\n                error={!!error}\r\n                label='Title'\r\n                helperText={error}\r\n                variant=\"outlined\"\r\n                disabled={props.disabled}\r\n                size=\"small\"/>\r\n            <IconButton color=\"primary\" onClick={addItemHandler} disabled={props.disabled} sx={{marginLeft: '10px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setNewTitle: (title: string) => void }","export type AuthMeResponseType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type ResponseGetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type FieldError = { field: string, error: string }\r\n\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors?: FieldError[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const {value, callBack, disabled} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(value)\r\n\r\n    const ActivateEditMode = () => {\r\n        setEditMode(!editMode)\r\n        callBack(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                onChange={onChangeHandler}\r\n                value={title}\r\n                onBlur={ActivateEditMode}\r\n                autoFocus\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n            />\r\n            :\r\n            disabled ? <span>{value}</span> : <span onDoubleClick={ActivateEditMode}>{value}</span>\r\n    )\r\n})\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    callBack: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatch, AppRootState} from \"../app/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootState> = useSelector\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useDispatch()\r\n    return useMemo(\r\n        () => {\r\n            return bindActionCreators(actions, dispatch)\r\n        }, [])\r\n}","import axios, {AxiosResponse} from 'axios'\r\nimport {LoginPayloadType} from \"../features/auth/Login\";\r\nimport {UpdateTaskType} from \"../features/todolists/todolist/tasks/tasks-reducer\";\r\nimport {AuthMeResponseType, CommonResponseType, ModelType, ResponseGetTasksType, TaskType, TodolistType} from \"./types\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41',\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<CommonResponseType>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TodolistType }>>>(`todo-lists/`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseGetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<CommonResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: ModelType) {\r\n        return instance.put<UpdateTaskType, AxiosResponse<CommonResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginPayloadType) {\r\n        return instance.post<LoginPayloadType, AxiosResponse<CommonResponseType<{ userId: number }>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {CommonResponseType, FieldError} from \"../api/types\";\r\n\r\nexport const handleAsyncServerAppError = <D>(data: CommonResponseType<D>, thunkAPI: ThunkAPIType, showError: boolean = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppErrorAC({error: data.messages.length ? data.messages[0] : 'some error'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError, thunkAPI: ThunkAPIType, showError: boolean = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport type ThunkError = { rejectValue: { errors: string[], fieldsErrors?: FieldError[] } }\r\n\r\n\r\n\r\n\r\n","import {authAPI} from \"../api/todolist-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {ResultCode} from \"../api/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../utils/error-utils\";\r\n\r\n// thunks\r\n\r\nexport const initializeApp = createAsyncThunk('app/initializeApp', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            return {value: true}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n// slice\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as null | string,\r\n        isInitialized: false as boolean\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n// types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n","import {todolistAPI} from \"../../api/todolist-api\"\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/error-utils\";\r\nimport {ResultCode, TodolistType} from \"../../api/types\";\r\n\r\n\r\n// thunks\r\n\r\nexport const fetchTodolists = createAsyncThunk<{ todos: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todos: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    const {dispatch} = thunkAPI\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        await todolistAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (error) {\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'idle'}))\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const createTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/createTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    const {dispatch} = thunkAPI\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.updateTodolist(param.todolistId, param.title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.todolistId, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    } finally {\r\n        dispatch(changeTodolistEntityStatusAC({id: param.todolistId, status: 'idle'}))\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    createTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\n// slice\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as TodoListDomainType[],\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            if (index !== -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            if (index !== -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todos.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todo => todo.id === action.payload.id)\r\n                if (index !== -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(createTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todo => todo.id === action.payload.id)\r\n                if (index !== -1) {\r\n                    state[index].title = action.payload.title\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\n//types\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {AppRootState} from \"../../app/store\";\r\n\r\nexport const todolists = (state: AppRootState) => state.todolists","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport * as todolistsSelectors from './selectors'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\n\r\n\r\nexport {\r\n    todolistsActions,\r\n    todolistsSelectors\r\n}","import {todolistAPI} from \"../../../../api/todolist-api\"\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError,} from \"../../../../utils/error-utils\";\r\nimport {AppRootState} from \"../../../../app/store\";\r\nimport {todolistsActions} from \"../../index\";\r\nimport {ModelType, ResultCode, TaskType} from \"../../../../api/types\";\r\n\r\n// thunks\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({todolistId: param.todolistId, taskId: param.taskId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const createTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>\r\n('tasks/addTask', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { todolistId: string, taskId: string, value: UpdateTaskType }, thunkAPI) => {\r\n\r\n    const {\r\n        dispatch,\r\n        rejectWithValue,\r\n        getState\r\n    } = thunkAPI\r\n\r\n    const state = getState() as AppRootState\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (task) {\r\n        const model: ModelType = {\r\n            ...task,\r\n            ...param.value\r\n        }\r\n        try {\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            dispatch(changeTaskEntityStatusAC({todolistId: param.todolistId, taskId: param.taskId, status: 'loading'}))\r\n            const res = await todolistAPI.updateTask(param.todolistId, param.taskId, model)\r\n            if (res.data.resultCode === ResultCode.OK) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n        } finally {\r\n            dispatch(changeTaskEntityStatusAC({todolistId: param.todolistId, taskId: param.taskId, status: 'idle'}))\r\n        }\r\n    } else {\r\n        return rejectWithValue('tasks not found in state')\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    deleteTask,\r\n    createTask,\r\n    updateTask\r\n}\r\n\r\n// slice\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, status: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index !== -1) {\r\n                tasks[index] = {...tasks[index], entityStatus: action.payload.status}\r\n            }\r\n        },\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(todolistsActions.fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todos.forEach(el => state[el.id] = [])\r\n            })\r\n            .addCase(todolistsActions.createTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(todolistsActions.removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    state[action.payload.todolistId] = action.payload.tasks.map(task => ({\r\n                        ...task,\r\n                        entityStatus: 'idle'\r\n                    }))\r\n                }\r\n            })\r\n            .addCase(deleteTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload!.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload!.taskId)\r\n                if (index !== -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(createTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                tasks.unshift({...action.payload, entityStatus: 'idle'})\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.value}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\n//types\r\n\r\nexport type UpdateTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [id: string]: TaskDomainType[]\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n","import {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport * as tasksSelectors from './selectors'\r\n\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nexport {\r\n    tasksActions,\r\n    tasksSelectors\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@mui/material\"\r\nimport {EditableSpan} from \"../../../../components/editableSpan/EditableSpan\"\r\nimport {Delete} from \"@mui/icons-material\"\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\nimport {tasksActions} from \"./\";\r\n\r\n\r\nconst TaskComponent = React.memo((props: TaskPropsType) => {\r\n\r\n    const {updateTask, deleteTask} = useActions(tasksActions)\r\n\r\n    const RemoveTaskHandler = useCallback((taskId: string) => {\r\n        deleteTask({todolistId: props.todolistId, taskId: taskId})\r\n    }, [props.todolistId, props.task.id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n\r\n        updateTask({todolistId: props.todolistId, taskId: props.task.id, value: {status}})\r\n    }, [props.todolistId, props.task.id])\r\n\r\n    const ChangeTask = useCallback((taskId: string, newTitle: string) => {\r\n        updateTask({todolistId: props.todolistId, taskId: props.task.id, value: {title: newTitle}})\r\n    }, [props.todolistId, props.task.id])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''} style={{position: 'relative'}}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed} color='primary'\r\n                  disabled={props.disabled}/>\r\n        <EditableSpan value={props.task.title} callBack={(newTitle) => ChangeTask(props.task.id, newTitle)}\r\n                      disabled={props.disabled}/>\r\n        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => RemoveTaskHandler(props.task.id)}\r\n                    disabled={props.disabled} sx={{ position: 'absolute', top: '2px', right: '2px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\nexport default TaskComponent;\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    disabled: boolean\r\n}","import React, {useCallback, useEffect} from \"react\"\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../../components/addItemForm/AddItemForm\"\r\nimport {Button, IconButton, Paper} from \"@mui/material\"\r\nimport {Delete} from \"@mui/icons-material\"\r\nimport TaskComponent from \"./tasks/TaskComponent\"\r\nimport {FilterType} from \"../todolists-reducer\";\r\nimport {TaskDomainType} from \"./tasks/tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {todolistsActions} from \"../index\";\r\nimport {TaskStatuses} from \"../../../api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {EditableSpan} from \"../../../components/editableSpan/EditableSpan\";\r\nimport {tasksActions} from \"./tasks\";\r\n\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((\r\n    {\r\n        id,\r\n        title,\r\n        tasks,\r\n        filter,\r\n        entityStatus\r\n    }\r\n) => {\r\n\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {removeTodolist, changeTodolistTitle, changeTodolistFilterAC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addNewTask = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.createTask({title: title, todolistId: id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.createTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        }\r\n        else {\r\n            helper.setNewTitle('')\r\n        }\r\n    }, [id])\r\n\r\n    const onClickRemoveHandler = () => {\r\n        removeTodolist(id)\r\n    }\r\n\r\n    const ChangeTodolist = useCallback((title: string) => {\r\n        changeTodolistTitle({todolistId: id, title})\r\n    }, [id])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const onButtonFilterHandler = useCallback((filter: FilterType) => {\r\n        changeTodolistFilterAC({id: id, filter: filter})\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        fetchTasks(id)\r\n    }, [])\r\n\r\n\r\n    const renderFilterButton = (buttonFilter: FilterType,\r\n                                color: 'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning',\r\n                                text: string) => {\r\n        return <Button\r\n            variant={filter === buttonFilter ? 'outlined' : 'text'}\r\n            onClick={() => onButtonFilterHandler(buttonFilter)}\r\n            color={color}>\r\n            {text}\r\n        </Button>\r\n    }\r\n\r\n    return (\r\n        <Paper sx={{padding: '10px', paddingTop: '20px', position: 'relative'}}>\r\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={onClickRemoveHandler}\r\n                        disabled={entityStatus === 'loading'}\r\n                        sx={{position: 'absolute', right: '5px', top: '5px'}}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan value={title} callBack={ChangeTodolist} disabled={entityStatus === 'loading'}/>\r\n            </h3>\r\n            <AddItemForm addItem={addNewTask} disabled={entityStatus === 'loading'}/>\r\n\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No tasks</div>}\r\n\r\n            {tasksForTodolist.map(t =>\r\n                <TaskComponent\r\n                    key={t.id}\r\n                    task={t}\r\n                    todolistId={id}\r\n                    disabled={t.entityStatus === 'loading' || entityStatus === 'loading'}\r\n                />\r\n            )}\r\n            <div style={{paddingTop: '10px'}}>\r\n                {renderFilterButton('all', 'warning', 'All')}\r\n                {renderFilterButton('active', 'error', 'Active')}\r\n                {renderFilterButton('completed', 'secondary', 'Completed')}\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskDomainType[]\r\n    filter: FilterType,\r\n    entityStatus: RequestStatusType\r\n}","import {AppRootState} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootState) => state.auth.isLoggedIn","import {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {LoginPayloadType} from \"./Login\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {ResultCode} from \"../../api/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/error-utils\";\r\n\r\n\r\n// thunks\r\n\r\nexport const login = createAsyncThunk<undefined, LoginPayloadType, ThunkError>('auth/auth', async (data: LoginPayloadType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error as AxiosError, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n// slice\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false as boolean\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../app/App\";\r\nimport {login} from \"./auth-reducer\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\nimport {useAppDispatch, useAppSelector} from \"../../utils/redux-utils\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values: LoginPayloadType) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Too short password'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: async (values: LoginPayloadType, formikHelpers: FormikHelpers<LoginPayloadType>) => {\r\n            const action = await dispatch(authActions.login(values))\r\n\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={ROUTS.DEFAULT}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                                             checked={formik.values.rememberMe}\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport type LoginPayloadType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions\r\n}","import React, {useCallback, useEffect} from \"react\"\r\nimport {Grid} from \"@mui/material\"\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../components/addItemForm/AddItemForm\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../app/App\";\r\nimport {authSelectors} from \"../auth\";\r\nimport {todolistsActions, todolistsSelectors} from \"./index\";\r\nimport {useActions, useAppDispatch, useAppSelector} from \"../../utils/redux-utils\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    let todolists = useAppSelector(todolistsSelectors.todolists)\r\n    let tasks = useAppSelector(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {fetchTodolists} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addTodolist = useCallback(async (todolistTitle: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.createTodolist(todolistTitle)\r\n\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.createTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        }\r\n        else {\r\n            helper.setNewTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={ROUTS.LOGIN}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container sx={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} sx={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {todolists.map(t => {\r\n                return <Grid item key={t.id}>\r\n                    <div style={{width: '300px', overflow: \"hidden\"}}>\r\n                        <Todolist\r\n                            key={t.id}\r\n                            id={t.id}\r\n                            entityStatus={t.entityStatus}\r\n                            title={t.title}\r\n                            tasks={tasks[t.id]}\r\n                            filter={t.filter}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {CircularProgress, Container} from \"@mui/material\"\r\nimport {TodolistsList} from \"../features/todolists/TodolistsList\"\r\nimport {CustomizedSnackbars} from \"../components/errorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/auth\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {selectIsInitialized} from \"./selectors\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\nimport {appActions} from \"./index\";\r\nimport {Header} from \"./AppBar\";\r\nimport {PageNotFound} from \"../components/PageNotFound\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\nexport enum ROUTS {\r\n    DEFAULT = '/',\r\n    LOGIN = '/login',\r\n    NOT_FOUND = '/404',\r\n}\r\n\r\nfunction App() {\r\n\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            className={'preloader'}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <Header/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={ROUTS.DEFAULT} element={<TodolistsList/>}/>\r\n                    <Route path={ROUTS.LOGIN} element={<Login/>}/>\r\n                    <Route path={ROUTS.NOT_FOUND} element={<PageNotFound/>}/>\r\n                    <Route path='*' element={<Navigate to={ROUTS.NOT_FOUND}/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <CustomizedSnackbars/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../utils/redux-utils\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const CustomizedSnackbars = () => {\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    )\r\n}","import {AppRootState} from \"./store\";\r\n\r\nexport const selectStatus = (state: AppRootState) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootState) => state.app.isInitialized","import * as appSelectors from './selectors'\r\nimport {asyncActions} from './app-reducer'\r\nimport {slice} from './app-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React from 'react';\r\nimport {AppBar, Button, LinearProgress, Toolbar, Typography} from \"@mui/material\";\r\nimport {useActions, useAppSelector} from \"../utils/redux-utils\";\r\nimport {selectStatus} from \"./selectors\";\r\nimport {authActions, authSelectors} from \"../features/auth\";\r\n\r\nexport const Header = () => {\r\n\r\n    const status = useAppSelector(selectStatus)\r\n    const isLoggedIn = useAppSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n\r\n    const logOutHandler = () => {\r\n        logout()\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar variant=\"dense\" className={'toolBar'}>\r\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                    Todolist\r\n                </Typography>\r\n                {isLoggedIn && <Button color='inherit' onClick={logOutHandler}>Log out</Button>}\r\n            </Toolbar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>\r\n    );\r\n};\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from '../features/todolists/todolist/tasks/tasks-reducer'\r\nimport {todolistsReducer} from '../features/todolists/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunk from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunk)\r\n\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport type AppRootState = ReturnType<RootReducerType>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './app/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\r\n\r\nroot.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>\r\n   )\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}